/*
 * Copyright (c) 2017, Timothy Baldwin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <stdio.h>

// RISC OS error numbers
#include <sys/errno.h>

// Linux error numbers
#include "ix/syscall_defs.h"

static struct {
  int number;
  const char *name;
} errors[4096];

#define ERR(E) errors[ix_ ## E].name = #E; errors[ix_ ## E].number = 0x20E00 + E;

int main(void) {
  ERR(EPERM)
  ERR(ENOENT)
  ERR(ESRCH)
  ERR(EINTR)
  ERR(EIO)
  ERR(ENXIO)
  ERR(E2BIG)
  ERR(ENOEXEC)
  ERR(EBADF)
  ERR(ECHILD)
  ERR(EDEADLK)
  ERR(ENOMEM)
  ERR(EACCES)
  ERR(EFAULT)
  ERR(ENOTBLK)
  ERR(EBUSY)
  ERR(EEXIST)
  ERR(EXDEV)
  ERR(ENODEV)
  ERR(ENOTDIR)
  ERR(EISDIR)
  ERR(EINVAL)
  ERR(ENFILE)
  ERR(EMFILE)
  ERR(ENOTTY)
  ERR(ETXTBSY)
  ERR(EFBIG)
  ERR(ENOSPC)
  ERR(ESPIPE)
  ERR(EROFS)
  ERR(EMLINK)
  ERR(EPIPE)
  ERR(EDOM)
  ERR(ERANGE)
  ERR(EAGAIN)
  ERR(EINPROGRESS)
  ERR(EALREADY)
  ERR(ENOTSOCK)
  ERR(EDESTADDRREQ)
  ERR(EMSGSIZE)
  ERR(EPROTOTYPE)
  ERR(ENOPROTOOPT)
  ERR(EPROTONOSUPPORT)
  ERR(ESOCKTNOSUPPORT)
  ERR(EOPNOTSUPP)
  ERR(EPFNOSUPPORT)
  ERR(EAFNOSUPPORT)
  ERR(EADDRINUSE)
  ERR(EADDRNOTAVAIL)
  ERR(ENETDOWN)
  ERR(ENETUNREACH)
  ERR(ENETRESET)
  ERR(ECONNABORTED)
  ERR(ECONNRESET)
  ERR(ENOBUFS)
  ERR(EISCONN)
  ERR(ENOTCONN)
  ERR(ESHUTDOWN)
  ERR(ETOOMANYREFS)
  ERR(ETIMEDOUT)
  ERR(ECONNREFUSED)
  ERR(ELOOP)
  ERR(ENAMETOOLONG)
  ERR(EHOSTDOWN)
  ERR(EHOSTUNREACH)
  ERR(ENOTEMPTY)
  ERR(EUSERS)
  ERR(EDQUOT)
  ERR(ESTALE)
  ERR(EREMOTE)
  ERR(ENOLCK)
  ERR(ENOSYS)

  printf(" AREA |ERRORS|, DATA, READONLY\n");

  for(int i = 0; i != 4096; ++i) {
    if(errors[i].number) {
      printf("block_%s\n DCD 0x%x\n DCB \"%s\",0\n ALIGN\n", errors[i].name, errors[i].number, errors[i].name);
    }
  }

  printf(" AREA |ERRORT|, DATA, READWRITE\n");
  printf(" EXPORT error_table\nerror_table\n");
  for(int i = 0; i != 4096; ++i) {
    if(errors[i].number) {
      printf(" DCD block_%s\n", errors[i].name);
    } else {
      printf(" DCD 0\n");
    }
  }

  printf(" END\n");
}
