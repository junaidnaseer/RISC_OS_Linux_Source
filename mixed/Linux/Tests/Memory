ON ERROR PROCprint(CHR$10+REPORT$+" at line "+STR$ERL+CHR$10):PROCfail

SYS "XOS_SWINumberFromString",,"IXSupport_LinuxSyscall" TO LinuxSyscall%; V%
IF V% AND 1 THEN LinuxSyscall%=0

SYS "OS_GetEnv" TO L$
P%=1
FOR W%=1 TO 3
  WHILE MID$(L$,P%,1)=" ":P%+=1:ENDWHILE
  P%=INSTR(L$," ",P%)
NEXT
Z%=EVAL(MID$(L$,P%))
QUIT

DEF FNdesktop_driver
PROCwimp_init("Test Driver")
PROCnull
Z%=FNhimem_test

PROCprint("Testing new task...")
SYS "Wimp_StartTask", "WimpSlot -min 32K -max 64K" TO task1%
PROCok
PROCassert("task1% = 0")
PROCnull

PROCprint("Testing initstore...")
SYS "Wimp_StartTask", "initstore { > null: }" TO task1%
PROCok
PROCassert("task1% = 0")
PROCnull

PROCprint("Starting slaves...")
SYS "Wimp_StartTask", "BASIC -quit <Test$Dir>.Memory FNdesktop_slave" TO tasks%(1)
SYS "Wimp_StartTask", "BASIC -quit <Test$Dir>.Memory FNdesktop_slave" TO tasks%(2)
PROCassert("tasks%(1)<>0 AND tasks%(2)<>0")
PROCok
PROCnull

PROCcall(1,"FNhimem_test")

IF LinuxSyscall% PROCcall_all("FNcheck_zero(&20000,&10000)")


FOR I%=0 TO 2
PROCprint(CHR$10+"Testing Wimp_TransferBlock from "+STR$I%+" to "+STR$((I%+1) MOD 3)+"."+CHR$10)
PROCcall_all("FNset_mem(&20000,&10000,tasks%(0))")
PROCprint("Running Wimp_TransferBlock from "+STR$I%+" to "+STR$((I%+1) MOD 3)+"...")
SYS "Wimp_TransferBlock", tasks%(I%), &24000, tasks%((I%+1) MOD 3), &28000, &4000
PROCok
PROCcall(I%,"FNcheck_mem(&20000,&10000,tasks%(0))")
PROCcall(I%+1,"FNcheck_mem(&20000,&8000,tasks%(0))")
PROCcall(I%+1,"FNcheck_mem(&28000,&4000,&"+STR$~(tasks%(I%) EOR &C000)+")")
PROCcall(I%+1,"FNcheck_mem(&2C000,&4000,tasks%(0))")
PROCcall(I%+2,"FNcheck_mem(&20000,&10000,tasks%(0))")
NEXT

SYS "OS_DynamicArea", 26, &200000
SYS "XOS_DynamicArea", 26, &FFFF0000 TO ;V%
PROCassert("V% AND 1")
SYS "OS_DynamicArea", 26, &300000
END=&280000
SYS "XOS_DynamicArea", 26, &200000 TO ;V%
PROCassert("V% AND 1")
I%=!&240000
END=&80000
SYS "OS_DynamicArea", 26, &100000
SYS "OS_DynamicArea", 26, &200000
SYS "XOS_DynamicArea", 26, &7FFF0000

SYS "OS_PlatformFeatures", 0 TO F%
PROCprint(CHR$10+"OS_PlatformFeatures 0 flags: "+FNbin(F%)+CHR$10)

PROCprint("Tests Completed"+FNnl)
IF LinuxSyscall%=0 THEN LinuxSyscall%=&59EC0
*Shutdown
SYS LinuxSyscall%,0,,,,,,,1
STOP



DEF FNdesktop_slave
PROCwimp_init("Test Slave")
REPEAT
  SYS "Wimp_Poll",0,buffer% TO R%
  CASE R% OF
   WHEN 17,18
    CASE buffer%!16 OF
     WHEN 0
      QUIT
     WHEN test_message%
      R$ = STR$(EVAL($(buffer%+20)))
      buffer%!0=256
      buffer%!12=buffer%!8
      $(buffer%+20) = R$
      SYS "Wimp_SendMessage", 17, buffer%, buffer%!4
    ENDCASE
  ENDCASE
UNTIL FALSE
STOP


DEF PROCnull
PROCprint("Waiting for null poll...")
REPEAT
  SYS "Wimp_Poll",0,buffer% TO R%
UNTIL R%=0
PROCok
ENDPROC

DEF PROCcall_all(C$)
LOCAL T%
FOR T%=0 TO 2
PROCcall(T%,C$)
NEXT
ENDPROC

DEF PROCcall(T%,C$)
T%=T% MOD 3
IF T%=0 THEN Z%=EVAL(C$):ENDPROC
buffer%!0=256
buffer%!12=0
buffer%!16=test_message%
$(buffer%+20) = C$
SYS "Wimp_SendMessage", 17, buffer%, tasks%(T%)

REPEAT
  SYS "Wimp_Poll",0,buffer% TO R%
UNTIL (R%=17 OR R%=18) AND buffer%!16=test_message%
REM =VAL($(buffer%+20))
ENDPROC


DEF FNhimem_test
E%=HIMEM
Z%=FNtest_limit(E%)
PROCtest_himem(E%-&4000)
PROCtest_himem(E%+&4000)
END=E%
=TRUE

REM Test end of appslot
DEF PROCtest_himem(L%)
END=L%
IF HIMEM<>L% PROCfail
Z%=FNtest_limit(L%)
ENDPROC

REM Test Limit of memory area
DEF FNtest_limit(L%)
PROCprint("Testing memory limit at "+STR$~L%+"...")
LOCAL Z%
LOCAL ERROR
ON ERROR LOCAL PROCfail
Z%=!(L%-4)
ON ERROR LOCAL PROCok:=TRUE
Z%=!L%
PROCfail
STOP

DEF PROCprint(S$)
IF LinuxSyscall% THEN SYS LinuxSyscall%,2,S$,LEN(S$),,,,,4:ENDPROC
LOCAL H%
SYS "OS_Byte",199,0,-1 TO ,H%
IF H% THEN
  PRINT S$;
ELSE
  H%=OPENUP("<Test$Log>")
  PTR#H%=EXT#H%
  BPUT#H%,S$;
  CLOSE#H%
ENDIF
ENDPROC

DEF PROCfail
PROCprint("Failed"+FNnl)
ON ERROR STOP
IF LinuxSyscall%=0 THEN LinuxSyscall%=&59EC0
*Shutdown
SYS LinuxSyscall%,1,,,,,,,1
STOP

DEF PROCok
PROCprint("ok"+FNnl)
ENDPROC

DEF FNnl=CHR$10

DEF PROCassert(A$)
IF EVAL(A$) THEN ENDPROC
PROCprint(FNnl+FNnl+"Assertion failed: "+A$+FNnl)
PROCfail
STOP

DEF PROCwimp_init(T$)
DIM tasks%(3)
test_message%=&C0400
DIM buffer% 256
SYS "Wimp_Initialise",200,&4B534154,T$ TO ,tasks%(0)
ENDPROC

DEF FNset_mem(start%,size%,K%)
LOCAL I%
PROCprint("Seting memory "+STR$~start%+" to "+STR$~(start%+size%)+" (key "+STR$~K%+")...")
FOR I%=start% TO start%+size%-3 STEP 4
  !I%=(I% EOR K%)
NEXT
PROCok
=TRUE

DEF FNcheck_mem(start%,size%,K%)
LOCAL I%
PROCprint("Testing memory "+STR$~start%+" to "+STR$~(start%+size%)+" (key "+STR$~K%+")...")
FOR I%=start% TO start%+size%-3 STEP 4
  IF !I%<>(I% EOR K%) THEN PROCfail
NEXT
PROCok
=TRUE

DEF FNcheck_zero(start%,size%)
PROCprint("Testing memory "+STR$~start%+" to "+STR$~(start%+size%)+" (zeros)...")
LOCAL I%
FOR I%=start% TO start%+size%-4 STEP 4
  IF !I% THEN PROCfail
NEXT
PROCok
=TRUE

DEF FNbin(V%)
LOCAL I%,S$
S$=""
FOR I%=1 TO 32
  S$=STR$(V% AND 1) + S$
  V%= V% >> 1
NEXT
=S$

DEF FNno_print
LOCAL ERROR
ON ERROR LOCAL =TRUE
PRINT:SYS "IXSupport_LinuxSyscall",3,1,,,,,,63 : REM dup2
=TRUE
