; Copyright (c) 2013-2017, Timothy Baldwin
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

 IF :LNOT: :DEF: Included_Hdr_PVOps
        GBLL    Included_Hdr_PVOps
Included_Hdr_PVOps SETL {TRUE}

 IF :LNOT: :DEF: Included_Hdr_Machine_Machine
        GET     Hdr:Machine.<Machine>
 ENDIF

; ************************************************
; ***      PVSysL - light version of PVSys     ***
; ***  Use on components that are only loaded  ***
; ***  in historic RISC OS vsersions.          ***
; ************************************************
                GBLA    PVSysL
 [ PVSys > 1
PVSysL          SETA    PVSys
 |
PVSysL          SETA    0
 ]

; **********************************************************
; ***  _PVirt - symbol prefix, change for special cases  ***
; **********************************************************
        GBLS    _PVirt
_PVirt  SETS    "__PVirt"

; *************************************************
; ***  PVOpsImports - declare imports for PVOps ***
; *************************************************
        MACRO
        PVOpsImports

        ; Linux port SWIs
        EXTERN  $_PVirt._FastSWI
        EXTERN  $_PVirt._SWI

        ; Linux system calls
        EXTERN  $_PVirt._LinuxSyscall

        ; Banked registers and PSR manipulation
        ; Implementions for 26-bit (TODO), 32-bit native and 32-bit user mode.
        EXTERN  $_PVirt._GetCPSR
        EXTERN  $_PVirt._GetDFAR
        EXTERN  $_PVirt._GetSPSR
        EXTERN  $_PVirt._LoadSaveBlock
        EXTERN  $_PVirt._LoadUsr
        EXTERN  $_PVirt._LoadUsrRegisters
        EXTERN  $_PVirt._MOVS_PC_LR
        EXTERN  $_PVirt._SetCPSR_c
        EXTERN  $_PVirt._SetCPSR_cxsf
        EXTERN  $_PVirt._SetCPSR_c_unstack
        EXTERN  $_PVirt._SetCPSR_cf_unstack
        EXTERN  $_PVirt._SetCPSR_cs_unstack
        EXTERN  $_PVirt._SetCPSR_csf_unstack
        EXTERN  $_PVirt._SetCPSR_cx_unstack
        EXTERN  $_PVirt._SetCPSR_cxf_unstack
        EXTERN  $_PVirt._SetCPSR_cxs_unstack
        EXTERN  $_PVirt._SetCPSR_cxsf_unstack
        EXTERN  $_PVirt._SetSPSR
        EXTERN  $_PVirt._StoreUsr

        ; Virtual banked registers
        EXTERN  $_PVirt._FindMode
        EXTERN  $_PVirt._GetVCPU
        EXTERN  $_PVirt._VModeOffsets

        ; For InitPVOps
        EXTERN  $_PVirt._Table

        MEND

; *************************
; ***  PVOps HAL Device ***
; *************************
                                ^       64
        ; Routine to install patch table
PVirt_PatchCode                 #       4

        ; Fast SWI calls, avoiding Linux seccomp + signal handler
PVirt_FastSWI                   #       4
PVirt_SWI                       #       4

        ; Linux system calls
PVirt_LinuxSyscall              #       4

        ; Banked registers and PSR manipulation
        ; Implementions for 26-bit, 32-bit native and 32-bit user mode are possible.
PVirt_GetCPSR                   #       4
PVirt_GetSPSR                   #       4
PVirt_LoadSaveBlock             #       4
PVirt_LoadUsr                   #       4
PVirt_LoadUsrRegisters          #       4
PVirt_MOVS_PC_LR                #       4
PVirt_SetCPSR_c                 #       4
PVirt_SetCPSR_c_unstack         #       4
PVirt_SetCPSR_cxsf              #       4
PVirt_SetCPSR_cxsf_unstack      #       4
PVirt_SetSPSR                   #       4
PVirt_StoreUsr                  #       4

        ; Virtual banked registers
PVirt_FindMode                  #       4
PVirt_GetVCPU                   #       4
PVirt_VModeOffsets              #       4

; *******************************************
; ***  PVJumpTable - Jump table for PVOps ***
; ***     Uses PVOpsImports if in ROM     ***
; *******************************************
        MACRO
        PVTableHeader $entry
        EXPORT  $_PVirt._$entry
        SWI     PVirt_$entry
$_PVirt._$entry
        MEND

        MACRO
        PVJumpTable
      IF PVSys = 3
        PVOpsImports
      ELIF PVSys > 0
        EXPORT  $_PVirt._Table
$_PVirt._Table

        EXPORT  $_PVirt._SetCPSR_cs_unstack
        EXPORT  $_PVirt._SetCPSR_cxs_unstack
$_PVirt._SetCPSR_cs_unstack
$_PVirt._SetCPSR_cxs_unstack
        MSR     cpsr_s, r1
        B       $_PVirt._SetCPSR_c_unstack

        EXPORT  $_PVirt._SetCPSR_csf_unstack
        EXPORT  $_PVirt._SetCPSR_cxsf_unstack
$_PVirt._SetCPSR_csf_unstack
$_PVirt._SetCPSR_cxsf_unstack
        MSR     cpsr_sf, r1

        EXPORT  $_PVirt._SetCPSR_cf_unstack
        EXPORT  $_PVirt._SetCPSR_cxf_unstack
$_PVirt._SetCPSR_cf_unstack
$_PVirt._SetCPSR_cxf_unstack
        MSR     cpsr_f, r1

        EXPORT  $_PVirt._SetCPSR_c_unstack
        EXPORT  $_PVirt._SetCPSR_cx_unstack
        SWI     PVirt_SetCPSR_c_unstack
$_PVirt._SetCPSR_c_unstack
$_PVirt._SetCPSR_cx_unstack
        LDR     r0, [sp, #16]
        STR     lr, [sp, #16]
        MOV     lr, r0
        LDMFD   sp!, {r0-r3, ip, pc}

        PVTableHeader GetCPSR
        MRS     r0, CPSR
        MOV     pc, lr

        PVTableHeader SetSPSR
        MSR     SPSR_cxsf, r1
        MOV     pc, lr

        PVTableHeader GetSPSR
        MRS     r0, SPSR
        MOV     pc, lr

        PVTableHeader GetVCPU
        UND

        PVTableHeader FindMode
        UND

        PVTableHeader MOVS_PC_LR
        MOVS    pc, lr

        PVTableHeader LoadUsrRegisters
        UND

        PVTableHeader SWI
        LDR     r0, [sp, #12]
        STR     lr, [sp, #12]
        MOV     lr, r0
        LDMFD   sp!, {r0-r3, pc}

        PVTableHeader LinuxSyscall
        UND

        PVTableHeader FastSWI
        MOV     pc, lr

        SWI     0

      ENDIF
        MEND

; ************************************************
; ***  InitPVOps - Initialise PVOps jump table ***
; ************************************************
        MACRO
        InitPVOps
      [ PVSys = 1 :LOR: PVSys = 2
        STMFD   sp!, {r0-r3, r8, lr} ; FIXME Remove?
        MOVW    r0, #0x30A
        MOV     r1, #0
        MOV     r8, #5
        SWI     XOS_Hardware
        MOVVS   r1, #-1
        ADRL    r0, $_PVirt._Table
        CMP     r1, #-1
        MOV     lr, pc
        LDRNE   pc, [r2, #PVirt_PatchCode]
        LDMFD   sp!, {r0-r3, r8, lr}
      ]
        MEND

; *************************************************************
; ***  MOVop2 - MOV with or without shift for use in macros ***
; *************************************************************
        MACRO
        MOVop2$c $rd, $op2a, $op2b
  [ "$op2b" = ""
    [  "$op2a" != "$rd"
        MOV$c   $rd, $op2a
    ]
  |
        MOV$c   $rd, $op2a, $op2b
  ]
        MEND

; ******************************************************
; ***  pvSWI - Simulate a SWI call preserving LR_usr ***
; ******************************************************
        MACRO
$label  pvSWI$cond $swi
$label
 [ PVSys > 0
        STM$cond.DB sp!, {r0-r3, lr}
        BL$cond $_PVirt._SWI
 ]
        SWI$cond $swi
        MEND

; **************************************************
; ***  fvSWI - Simulate a SWI call corrupting LR ***
; **************************************************
        MACRO
$label  fvSWI$cond $swi
$label
 [ PVSys > 0
        BL$cond $_PVirt._FastSWI
 ]
        SWI$cond $swi
        MEND


; ********************************************************
; *** pvMRS - Simulate MRS if PVirt > 0, else real MRS ***
; ********************************************************
        MACRO
$label  pvMRS$c $reg, $psr
        ASSERT  ("$psr" = "CPSR") :LOR: ("$psr" = "SPSR")
 [ PVirt > 0
        IF      $reg = 0
$label  STR$c   lr, [sp, #-4]!
        BL$c    $_PVirt._Get$psr
        LDR$c   lr, [sp], #4

        ELIF    $reg = 14
$label  STR$c   r0, [sp, #-4]!
        BL$c    $_PVirt._Get$psr
        MOV$c   lr, r0
        LDR$c   r0, [sp], #4

        ELSE
$label  STM$c.FD sp!, {r0, lr}
        BL$c    $_PVirt._Get$psr
        MOV$c   $reg, r0
        LDM$c.FD sp!, {r0, lr}

        ENDIF
 |
$label  MRS$c   $reg, $psr
 ]
        MEND

; ********************************************************
; *** pvMSR - Simulate MSR if PVirt > 0, else real MSR ***
; ********************************************************
        MACRO
$label  pvMSR$c $psr, $op2a, $op2b
$label
 IF PVirt < 1
        [ "$op2b" = ""
        MSR$c   $psr, $op2a
        |
        MSR$c   $psr, $op2a, $op2b
        ]
 ELIF "$psr" = "SPSR_cxsf"
        STM$c.FD sp!, {r1, lr}
        MOVop2$c r1, $op2a, $op2b
        BL$c    $_PVirt._SetSPSR
        LDM$c.FD sp!, {r1, lr}
 ELSE

        ASSERT "$psr":LEFT:5 = "CPSR_"
        ASSERT "$psr":LEFT:6 <> "CPSR_x"

  [ "$psr":LEFT:6 = "CPSR_c"
        STM$c.FD sp!, {r0-r3, ip, lr}
        MOVop2$c r1, $op2a, $op2b
        BL$c    $_PVirt._Set$psr._unstack
  ]

        [ "$op2b" = ""
        MSR$c   $psr, $op2a
        |
        MSR$c   $psr, $op2a, $op2b
        ]
 ENDIF ; PVirt
        MEND

; *****************************************************************
; *** MOVS_PC_LR - Simulate MOVS PC, LR if PVirt > 0, else real ***
; *****************************************************************
        MACRO
$label  MOVS_PC_LR $c
 [ PVirt > 0
$label  B$c     $_PVirt._MOVS_PC_LR
 |
$label  MOV$c.S pc, lr
 ]
        MEND


 ENDIF
        END
