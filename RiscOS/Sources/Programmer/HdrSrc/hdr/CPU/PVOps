; Copyright (c) 2013-2017, Timothy Baldwin
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

 IF :LNOT: :DEF: Included_Hdr_PVOps
        GBLL    Included_Hdr_PVOps
Included_Hdr_PVOps SETL {TRUE}

 IF :LNOT: :DEF: Included_Hdr_Machine_Machine
        GET     Hdr:Machine.<Machine>
 ENDIF

; ************************************************
; ***      PVSysL - light version of PVSys     ***
; ***  Use on components that are only loaded  ***
; ***  in historic RISC OS vsersions.          ***
; ************************************************
                GBLA    PVSysL
 [ PVSys > 1
PVSysL          SETA    PVSys
 |
PVSysL          SETA    0
 ]

; *************************************************
; ***  PVOpsImports - declare imports for PVOps ***
; *************************************************
        MACRO
        PVOpsImports
        MEND

; *************************
; ***  PVOps HAL Device ***
; *************************
                                ^       64
        ; Routine to install patch table
PVirt_PatchCode                 #       4

        ; Fast SWI calls, avoiding Linux seccomp + signal handler
PVirt_FastSWI                   #       4
PVirt_SWI                       #       4

        ; Linux system calls
PVirt_LinuxSyscall              #       4

        ; Banked registers and PSR manipulation
        ; Implementions for 26-bit, 32-bit native and 32-bit user mode are possible.
PVirt_GetCPSR                   #       4
PVirt_GetSPSR                   #       4
PVirt_LoadSaveBlock             #       4
PVirt_LoadUsr                   #       4
PVirt_LoadUsrRegisters          #       4
PVirt_MOVS_PC_LR                #       4
PVirt_SetCPSR_c                 #       4
PVirt_SetCPSR_c_unstack         #       4
PVirt_SetCPSR_cxsf              #       4
PVirt_SetCPSR_cxsf_unstack      #       4
PVirt_SetSPSR                   #       4
PVirt_StoreUsr                  #       4

        ; Virtual banked registers
PVirt_FindMode                  #       4
PVirt_GetVCPU                   #       4
PVirt_VModeOffsets              #       4

; *******************************************
; ***  PVJumpTable - Jump table for PVOps ***
; ***     Uses PVOpsImports if in ROM     ***
; *******************************************
        MACRO
        PVJumpTable
        MEND

; ************************************************
; ***  InitPVOps - Initialise PVOps jump table ***
; ************************************************
        MACRO
        InitPVOps
        MEND

; ******************************************************
; ***  pvSWI - Simulate a SWI call preserving LR_usr ***
; ******************************************************
        MACRO
$label  pvSWI$cond $swi
$label
        SWI$cond $swi
        MEND

; **************************************************
; ***  fvSWI - Simulate a SWI call corrupting LR ***
; **************************************************
        MACRO
$label  fvSWI$cond $swi
$label
        SWI$cond $swi
        MEND


; ********************************************************
; *** pvMRS - Simulate MRS if PVirt > 0, else real MRS ***
; ********************************************************
        MACRO
$label  pvMRS$c $reg, $psr
        ASSERT  ("$psr" = "CPSR") :LOR: ("$psr" = "SPSR")
$label  MRS$c   $reg, $psr
        MEND

; ********************************************************
; *** pvMSR - Simulate MSR if PVirt > 0, else real MSR ***
; ********************************************************
        MACRO
$label  pvMSR$c $psr, $op2a, $op2b
$label
        [ "$op2b" = ""
        MSR$c   $psr, $op2a
        |
        MSR$c   $psr, $op2a, $op2b
        ]
        MEND

; *****************************************************************
; *** MOVS_PC_LR - Simulate MOVS PC, LR if PVirt > 0, else real ***
; *****************************************************************
        MACRO
$label  MOVS_PC_LR $c
$label  MOV$c.S pc, lr
        MEND

 ENDIF
        END
